
/** @namespace
  The filesystem module for the xt framework in node.js is
  a collection of operations that make file io more convenient
  for extensions and objects.
*/
xt.filesystem = { /** xt.filesystem.prototype */ }; xt.fs = xt.filesystem;

// Determine the base path to the current execution
// so that anything else can be resolved from this location
xt.fs.basePath = process.cwd();

xt.mixin(xt.filesystem, 
  /** @scope xt.filesystem.prototype */ {
    
  /** @private
    Reference to built-in filesystem module.
  */
  __fs__: require('fs'),
  
  /** @private
    Reference to built-in path module.
  */
  __path__: require('path'),
  
  /** @public
    Find and return paths to all files in a specified directory.
    Optionally an extension can be specified as the third paramater.
    The second parameter is the callback on completion. This method is
    asynchronous.
  
    @param {String} path to directory
    @param {Function} callback on completion expects a single array as result
    @param {String} extension
    @returns {Array} array of strings as filepaths to files in directory
  */
  directoryFiles: function(p, c, t) {
    p = this.__path__.normalize(p);
    try {
      this.__fs__.readdir(p, function(e, f) {
        c(xt.typeOf(t) === xt.t_string ? xt.fs.reduce(f, t) : f);
      })
    } catch(e) { 
      xt.warn(e); 
      c([]); 
    }
  }, 
  
  /** @public
    Reads the contents of a given file and/or path. This assumes utf-8
    encoding and is asynchronous in execution.
    
    @param {String} path to file directory or full path
    @param {String} filename if not as part of path (will be normalized)
    @param {Function} the callback takes an error and filedata paramaters
  */
  readFile: function(p, f, c) {
    p = this.__path__.join(p, f);
    try {
      var d = this.__fs__.readFile(p, 'utf-8', c)
    } catch(e) {
      xt.warn(e);
      c("");
    }
  },
  
  /** @public
    Takes a string from a file read and parses it into an array of lines.
    This function is synchronous and returns the array.
  
    @param {String} filedata to parse
    @returns {Array} of lines of file contents
  */
  byLine: function(f) {
    if(!f || f.length == 0 || xt.typeOf(f) !== xt.t_string) return [];
    return f.split('\n');
  },
  
  /** @private
    Reduces an array of filenames to just files with the specified
    extension.
    
    @param {Array} the filenames
    @param {String} the filetype extension
    @returns {Array} array with just matching files
  */
  reduce: function(f, t) {
    if(!f || f.length < 1) return f || [];
    var i = 0,
        l = f.length,
        n = [],
        s = t.length, p;
    for(; i<l; ++i) {
      p = f[i].length - s;
      if(!!~f[i].indexOf(t) && f[i][p] == t[0]) n.push(f[i]);
    }
    return n;
  }
      
}) ;