
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");

// load into module namespace
require("tools");

//................................
// exception primary methods and objects

// @note Exceptions are UNDER DEVELOPMENT
//  and should be used KNOWING they will be
//  modified (most likely)

XT.Exception = XT.Object.extend({
  exec: function() {
    var msg = "\n{0} CAUGHT: {1}\n".format(
      this.get("xtClass"), this.get("message"));
    XT.puts(msg);
  },
  message: "NO MESSAGE PROVIDED FOR EXCEPTION",
  xtClass: "XT.Exception",

});

// @example
//  XT.throw(new XT.FATAL({ message: "TOO MUCH TOO MUCH!!!", code: 786 }));

XT.FATAL = XT.Exception.extend({
  exec: function() {
    this.__super.exec.call(this);
    XT.puts("PROCESS TERMINATING\n");
    if(this.get("stack")) { 
      XT.puts(this.get("stack"));
    } else { XT.puts(new Error().stack); }
    process.emit("XT.FATAL");
    process.exit((this.get("code") || XT.FATAL.CODE));
  },
  xtClass: "XT.FATAL",
});

// @note made up value for development, should all
//  be defined somewhere with specific meanings...
XT.FATAL.CODE = "890";

// @example
//  XT.throw(new XT.WARNING{ message: "YOU SUCK" }));

XT.WARNING = XT.Exception.extend({
  init: function() {
    var message = this.get("message");
    var err = new Error().stack;
    this.set("message", "{0}\n{1}".format(message, err));
  },
  xtClass: "XT.WARNING",
});

// @example
//  XT.throw(new XT.DEBUGGING({ message: "LEVEL 3 DEBUGGING TEST", level: 3 }));

XT.DEBUGGING = XT.Exception.extend({
  exec: function() {
    var level = this.get("level") || 2;
    if(!level || level > (global.XT_DEBUG_LEVEL || 2))
      return;
    var msg = this.get("message");
    msg = "(DEBUGGING LEVEL {0}) {1}".format(level, msg);
    this.set("message", msg);
    this.__super.exec.call(this);
  },
  xtClass: "XT.DEBUGGING",
});

XT.throw = function(xtExcept, data, xtResponse) {
  var fullMessage = "";
  if(xtExcept.exec) {
    xtExcept.exec();
  } else {
    fullMessage = xtExcept.message;
    if(data) fullMessage += "\n{0}".format(XT.inspect(data, true, true));
    XT.throw(new xtExcept.type({ message: fullMessage }));
  }
  if(xtResponse) {
    xtResponse.set("nonRecord");
    xtResponse.get("serverResponse").writeHead(501, { "Content-Type": "text/html" });
    xtResponse.send("<h1>INTERNAL SERVER ERROR</h1>");
    xtResponse.end("<pre>{0}</pre>".format(fullMessage));
  }
};

//................................
// defined exceptions (SUPPOSED TO MATCH CLIENT)

// unknown error
XT.E1000 = { code: "xt1000" };

// number is required
XT.E1001 = { code: "xt1001" };

// name is required
XT.E1002 = { code: "xt1002" };

//................................
// defined exceptions (SERVER ONLY)

// FATAL EXCEPTIONS

// WARNING EXCEPTIONS
XT.E201 = {
  message: "XT.E201: INVALID OR UNKNOWN TYPE",
  type: XT.WARNING
};

XT.E202 = {
  message: "XT.E202: INVALID OR UNKNOWN CONTENT-TYPE",
  type: XT.WARNING
};

XT.E203 = {
  message: "XT.E203: INVALID OR UNKNOWN ACTION",
  type: XT.WARNING
};

XT.E204 = {
  message: "XT.E204: INVALID OR UNKNOWN METHOD",
  type: XT.WARNING
};

XT.E205 = {
  message: "XT.E205: UNABLE TO PARSE JSON PAYLOAD",
  type: XT.WARNING
};

XT.E206 = {
  message: "XT.E206: RETRIEVE REQUEST MUST HAVE PAYLOAD ENTRY FOR REQUESTED TYPE",
  type: XT.WARNING
};

XT.E207 = {
  message: "XT.E207: QUERY ERROR",
  type: XT.WARNING
};

XT.E208 = {
  message: "XT.E208: NO HANDLER FOR REQUEST",
  type: XT.WARNING
};

XT.E209 = {
  message: "XT.E209: COULD NOT CREATE RECORD TYPE",
  type: XT.WARNING
};
