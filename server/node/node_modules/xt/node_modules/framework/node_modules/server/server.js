

// require some core modules
var UTIL =  require("util");
var PATH =  require("path");
var HTTP =  require("http");

// load into module namespace from above
require("tools");
require("exception");

// load into module namespace from below
require("router");

XT.Server = XT.Object.extend({

  init: function() {
    var port = this.get("port"),
      router = this.get("router");
    if(!port) XT.throw(new XT.FATAL({ message:
      "Cannot create server without a port" }));
    if(!router) XT.throw(new XT.Fatal({ message:
      "Cannot create server without a router" }));
    this.set("isReady", true);
    router.set("server", this);
  },

  start: function() {
    if(false === this.get("isReady"))
      XT.throw(new XT.FATAL({ message: "Cannot start server ({0}), isReady not set".format(
        this.get("name")) }));
    var port = this.get("port"), self = this, _server;
    try {
      (__server = HTTP.createServer(function(response, request) {
        self.get("router").route(response, request);
      })).listen(port);
      this.set("__server", __server);
    } catch(e) { XT.throw(new XT.FATAL({ message: e })); }
    XT.puts("\nStarted server '{0}' listening on port {1}\n".format(
      this.get("name"), port));
  },

  shutdown: function() {
    var __server = this.get("__server");
    if(!__server) {
      XT.throw(new XT.WARNING({ message: "Cannot stop server, server not running" }));
      return false;

      // @note Need to throw shutdown event for cleanup?
    } else { __server.close(); }
    return true;
  },

  pause: function() {},

  restart: function() {},

  port: null,

  isReady: false,

  name: "XT: GENERIC HTTP SERVER",

  xtClass: "XT.Server",

  router: null,

});
