
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");
var URL     = require("url");

// load into module namespace from above
require("tools");
require("exception");

// load into module namespace from level
require("route");
require("response");

XT.Router = XT.Object.extend({

  /** @private */
  init: function() {

    // set the routes object to the local reference
    this.set("routes", XT.Route.loadedRoutes); 

    // XT.puts("AVAILABLE ROUTES:\n{0}".format(XT.inspect(XT.Tools.keys(this.get("routes")), true, true)));

    var self = this;

    XT.Tools.each(this.get("routes"), function(name, obj) {
      obj.set("router", self);
    });

    // set the known recordTypes for comparative purposes in
    // determination of what type of request we've received
    // this.set("recordTypes", this.get("store.recordTypes"));

    // setup asynchronous event handlers
    this.on("findRoute", this.findRoute);
  },

  /** @public
    This method called by the server directly and passes the router
    the request and response objects it created on client connection.
    This method is responsible for asynchronously receiving any data
    being sent to the server and then beginning the handler path by
    letting the info object be created/parsed then the route found
    and executed.
    
    @param {HTTP.ServerRequest} request from client
    @param {HTTP.ServerResponse} the response stream object to the client
  */
  route: function(request, response) {

    // setup the response object
    var xtResponse = XT.Response.create({

      // pass the original http server-response
      serverResponse: response,

      // pass the original http server-request
      serverRequest: request,

    });

    var self = this;

    // listen for any payload data and on end execute the remainder of the
    // discovery path (finding the correct handler)
    xtResponse.serverRequest.on("data", function(chunk) {
      xtResponse.payloadIn += chunk;
    }).on("end", function() {
      self.emit("findRoute", xtResponse);
    });
  },

  /** @private
    Once the info object is generated for the request, it is passed to
    this method asynchronously for processing.
  */
  findRoute: function(xtResponse) {

    // grab the routes
    var routes = this.get("routes");

      // XT.puts("CHECKING FOR ROUTE FOR: {0}".format(xtResponse.url));

      if(routes[ xtResponse.url ]) {
        routes[ xtResponse.url ].handle(xtResponse);
      } else { XT.throw(XT.E208, "NO ROUTE FOR {0}".format(xtResponse.url), xtResponse.serverResponse); }

    // publish the request data now...
    XT.Tools.publishRequest(xtResponse, this);
  },

  /** @private 
    The store is the singleton instance of the store created
    when the system was started. This is used for direct access
    to the XT.Records.
  */
  store: XT.Store,

  /** @private
    Routes as available from the loaded XT.Route object base
    post initialization.
  */
  routes: null,

  /** @private
    Set by server so we have a reference to the server that owns us.
  */
  server: null,

  /** @private */
  xtClass: "XT.Router",
  
});

