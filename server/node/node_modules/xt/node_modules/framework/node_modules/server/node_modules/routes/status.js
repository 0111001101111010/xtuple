
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");

// load into module namespace from above
require("tools");
require("exception");

// load into module namespace from level
require("route");

XT.StatusRoute = XT.Route.create({

  init: function() {},
  
  handle: function(xtResponse) {

    //......................................
    // @note This does NOT use security AT ALL right now...

    // tell the xt response it is using non-record
    xtResponse.set("nonRecord");

    // set headers to correct type (text/html)
    this.prepare(xtResponse);

    // determine which
    var parts = xtResponse.url[ 0 ] == "/"
      ? xtResponse.url.substring(1).split("/")
      : xtResponse.split("/")
      ;

    var request = parts[ parts.length-1 ];

    XT.puts("TRYING TO GET {0}".format(request));

    // special case...
    if(request == "routes") request = "_routes";

    if(this[ request ] && this[ request ] instanceof Function) {
      this[ request ](xtResponse);
    } else { XT.puts("COULD NOT FIND FUNCTION FOR {0}".format(request)); }

  },

  _routes: function(xtResponse) {
    
    var self = this, routes = XT.Tools.keys(this.get("router.routes"));
    xtResponse.send(this.getListHeader("Routes Available to Server"));
    XT.Tools.each(routes, function(idx, name) {
      xtResponse.send(self.getListItem(name));
    });
    xtResponse.send(this.getListEnd());
    xtResponse.end();
  },

  records: function(xtResponse) {

    var self = this, recordTypes = XT.Tools.keys(XT.Store.recordManager.get("types"));
    xtResponse.send(this.getListHeader("Records Available to Server"));
    XT.Tools.each(recordTypes, function(idx, name) {
      xtResponse.send(self.getListItem(name));
    });
    xtResponse.send(this.getListEnd());
    xtResponse.end(); 

  },

  getListHeader: function(label) {
    return "<div class='status-list'><div class='status-list-label'>" +
      label + "</div>";
  },

  getListItem: function(item) {
    return "<span class='status-list-item'>" + item + "</span>";
  },

  getListEnd: function() { return "</div>"; },

  routes: {
    "/retrieve/status/records":'',
    "/retrieve/status/routes":'',
  },

  /** @private */
  xtClass: "XT.StatusRoute",

});

process.emit("loadedRoute", XT.StatusRoute);
