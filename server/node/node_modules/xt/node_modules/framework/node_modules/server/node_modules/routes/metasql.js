
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");
var HTTP    = require("http");

// load into module namespace from above
require("tools");
require("exception");

// load into module namespace from level
require("route");

XT.MetasqlRoute = XT.Route.create({

  init: function() { },
  
  handle: function(xtResponse) {

    // this will need to be moved once the metasql's are identified dynamically
    xtResponse.set("isMetaSQL", true);

    // as a temporary solution this is just being made into a proxy request to a
    // running ORIGINAL php datasource since we need to either transpose the
    // metasql interpreter to JS (imo terrible idea) or create it as a compilable
    // extension to node.js (imo GOOD IDEA!)

    xtResponse.set("nonRecord");

    // minor editing since we aren't the ones doing the actual db call
    // need to re-add the .php extension
    var urlBase = xtResponse.url.replace(/\/retrieve\/metasql/, "runmetasql.php");


    var tail = XT.METASQL_SOURCE_PATH + "/datasource/" + urlBase;

    // auto-forward request to this temporarily fixed/available url...
    var host = XT.METASQL_SOURCE_URL || "sproutcore.xtuple.org";

    XT.puts("Forwarding MetaSQL request to: {0}{1}".format(host, tail));

    // XT.puts("HEADERS: {0}".format(XT.inspect(xtResponse.serverRequest.headers, true, true)));

    // scope reference for response from proxied request
    var remotePayload = "";

    // we already have the payload (if any) to forward along with the request so...
    // lets get to it
    var proxyRequest = HTTP.request({
      method: "POST",
      path: tail,
      host: host,
      port: XT.METASQL_SOURCE_PORT || 80,
      headers: xtResponse.serverRequest.headers,

      // and when we get the response...
    }, function(remoteResponse) {
      
      // XT.puts("RECEIVED BACK FROM REMOTE:\n {0}".format(XT.inspect(remoteResponse, true, true)));

      // need to fetch any payload data for that of course...
      remoteResponse.on("data", function(chunk) {
        remotePayload += chunk;

        // and when that is all done...
      }).on("end", function() {
        
        // XT.puts("REMOTE PAYLOAD: {0}".format(XT.inspect(remotePayload, true, true)));

        // shove the response into the original request and be done with it
        xtResponse.send(remotePayload).end();
      });
    });

    // now that the responder chain is setup, go ahead and
    // fire the proxy request
    proxyRequest.write(xtResponse.payloadIn);
    proxyRequest.end();
  },

  routes: {

    "/retrieve/metasql/XT.ActivityTable/query":'',
    "/retrieve/metasql/XT.Address/findExisting":'',
    "/retrieve/metasql/XT.Address/useCount":'',
    "/retrieve/metasql/XT.AddressSearch/query":'',
    "/retrieve/metasql/XT.ContactSearch/query":'',
    "/retrieve/metasql/XT.ContactTable/query":'',
    "/retrieve/metasql/XT.CrmAccountSearch/query":'',
    "/retrieve/metasql/XT.CrmAccountTable/query":'',
    "/retrieve/metasql/XT.CustomerShiptoSearch/query":'',
    "/retrieve/metasql/XT.IncidentSearch/query":'',
    "/retrieve/metasql/XT.IncidentTable/query":'',
    "/retrieve/metasql/XT.OpportunitySearch/query":'',
    "/retrieve/metasql/XT.OpportunityTable/query":'',
    "/retrieve/metasql/XT.ProjectTable/query":'',
    "/retrieve/metasql/XT.ProjectSearch/query":'',
    "/retrieve/metasql/XT.ProspectCustomerSearch/query":'',
    "/retrieve/metasql/XT.ProspectTable/query":'',
    "/retrieve/metasql/XT.QuoteSearch/query":'',
    "/retrieve/metasql/XT.QuoteTable/query":'',
    "/retrieve/metasql/XT.Record/nextNumber":'',
    "/retrieve/metasql/XT.Session/privileges":'',
    "/retrieve/metasql/XT.Session/locale":'',
    "/retrieve/metasql/XT.Session/metrics":'',
    "/retrieve/metasql/XT.Session/sourceCommentTypes":'',
    "/retrieve/metasql/XT.UserSearch/query":''

  },

  /** @private */
  xtClass: "XT.MetasqlRoute",

});

process.emit("loadedRoute", XT.MetasqlRoute);
