
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");
var HTTP    = require("http");

// load into module namespace from above
require("tools");
require("exception");
require("store");

// load into module namespace from level
require("route");

XT.FunctorRoute = XT.Route.create({

  /** @private */
  init: function() {

    // grab a reference to the functor manager
    this.set("functors", XT.FunctorManager);
  },
  
  /** @private */
  handle: function(xtResponse) {
    
    // the xtResponse already contains the loaded payload, we can't
    // verify that we have it/need it here because there may be a functor
    // that doesn't require any...

    var payload;

    // try and parse out the JSON payload
    try {

      // parse it
      payload = xtResponse.payloadIn = JSON.parse(xtResponse.payloadIn);

    } catch(e) { XT.throw(new XT.FATAL({ message: e, stack: e.stack })); }

    // fetch the functor
    var functor = this.get("functors").fetch(payload.name);

    // if it isn't known, we have to error (non-fatal)
    if(false === functor) {
      XT.throw(XT.E201, functorName, xtResponse); return;
    } else {

      // remove the functor's name from the payload object
      delete payload.name;

      // create array out of parsed object
      var args = XT.Tools.values(payload) || [];

      // unshift the xtResponse on top since ALL functors should
      // expect that as the first parameter
      args.unshift(xtResponse);

      // we got a functor, now execute it passing it the remaining
      // variables in the payload (since it should know what to expect)
      functor.exec.apply(functor, args);
    }

  },

  routes: {
    "/retrieve/functor":'',
  },

  /** @private */
  xtClass: "XT.FunctorRoute",

});

process.emit("loadedRoute", XT.FunctorRoute);

