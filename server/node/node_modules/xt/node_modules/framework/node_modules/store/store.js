
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");

// load into module namespace from above
require("tools");
require("exception");
require("security");

// load into module namespace from below
require("cache");
require("driver");

//..................................
// store object definition

XT.Store = XT.Object.create({

  /** @private */
  init: function() {
    this.on("recordsProcessed", this.buildRelations);
  },

  //......................................
  // public accessor methods
  
  /** @public */
  fetch: function(uuid) {
    return this.get("cache").fetch(uuid);
  },

  /** @public */
  fetchQuery: function(xtRecord) {
    var uuid = this.get("queries").get(xtRecord);
    if(false === uuid) return false;
    return this.get("cache").get(uuid);
  },

  //......................................
  // internal methods

  /** @private */
  insert: function(elem) {
    return this.get("cache").insert(elem);
  },

  /** @private */
  registerQuery: function(xtQuery) {
    var uuid = this.insert(xtQuery);
    this.get("queries").set(xtQuery.get("type"), uuid);
  },

  /** @private */
  buildRelations: function() {

    // NOW we can use the record manager's `loadRelations` on the queries
    // because it can finally build them
    var queries = this.get("queries.XT"), self = this;
    
    // iterate over the registered query references and call the record manager
    XT.Tools.each(queries, function(type, uuid) {
      self.get("recordManager").loadRelations(
        self.fetch(uuid)); 
    });

  },

  //......................................
  // internal objects

  /** @private */
  driver: XT.Driver,

  /** @private */
  sessioner: null,

  /** @private */
  recordManager: null,

  /** @private */
  queries: XT.Object.create({ 

    /** @private */
    xtClass: "XT.Store.queries"

  }),

  /** @private */
  cache: XT.Cache,

  /** @private */
  xtClass: "XT.Store",

});

// load into module namespace from below
require("record_manager");
