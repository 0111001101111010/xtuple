
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");

// load into module namespace from above
require("tools");
require("exception");

/** @public
  The XT.Functor base class is to be extended for all functors that execute, forward,
  scope, proxy, or...something else for PostgreSQL functions.
*/
XT.Functor = XT.Object.extend({

  /** @private */
  init: function() {

    // auto set to execute the `action` method when `exec` emits "action"
    this.on("action", this.action);
  },

  /** @private
    Need permissions...security missing
  */
  permissions: null,

  /** @public
    This is the accessor to the functor that determines the course of action.
    Override this method to accept the parameters you're expecting and call
    action the way you need it to be called.
  */
  exec: function() { },

  /** @private
    The "action" is the routine it will run. In some scenarios this will
    be executed as a component of a functor and others in the context of
    a XT.Record (or other possibly).
  */
  action: function() { },

  /** @private */
  xtClass: "XT.Functor",

});

XT.__extend(XT.Functor, {

  // @todo Writing this out again makes it obvious it could be abstracted...
  loadFunctors: function() {

    try {
    
      // chdir to the modules directory (to be able to successfully use
      // relative paths...)
      process.chdir(__dirname);

      // grab the files in the functors directory
      var files = XT.Tools.prepend(
        XT.Tools.fs.readDir("./functors/", [ ".js" ]), "./");

      // grab the length so we know how many to expect
      var functorsToLoad = files.length;

      // when the functors are required they emit a call for "loadedFunctor"
      // and pass themselves, so we register them by xtClass and decrement the
      // counter, eventually emitting the allFunctorsLoaded so anyone waiting
      // will know we are done
      process.on("loadedFunctor", function(functor) {
        XT.Functor.loadedFunctors[ functor.xtClass ] = functor;
        --functorsToLoad; if(functorsToLoad === 0) process.emit("allFunctorsLoaded");
      });

      // iterate over each of the files we found and require it so it will be
      // executed (and an instance created)
      XT.Tools.each(files, function(idx, filename) {
        require(filename);
      });

    } catch(e) { XT.throw(new XT.FATAL({ message: e, stack: e.stack })); }

  },

  /** @private */
  loadedFunctors: {},

});

// startup the loading of functors
XT.Functor.loadFunctors.call(XT.Functor.prototype);
