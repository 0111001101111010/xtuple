
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");

// load into module namespace from above
require("tools");
require("exception");
require("store");

// load into module namespace from level
require("functor");

XT.FunctorManager = XT.Object.create({

  /** @private */
  init: function() {
    
    // retrieve the auto-loaded functors
    var functors = XT.Functor.loadedFunctors, self = this;
    
    // iterate over them and register them
    XT.Tools.each(functors, function(xtClass, functor) {

      // inserts an entry into the local functors object that maps the
      // name to the XT.Cache entry by uuid
      self.get("functors").set(xtClass, self.get("cache").insert(functor)); 
    });
  },

  /** @public */
  fetch: function(xtClass) {

    // functors uses overridden `get` function so call it
    // explicitly otherwise it will fail
    return this.get("functors").get(xtClass);
  },

  /** @private */ 
  functors: XT.Object.create({

    /** @private */
    get: function(name) {
      var uuid = this.__super.get.call(this, name);
      return uuid
        ? XT.Cache.fetch(uuid)
        : false
        ;
    },
    
    /** @private */
    xtClass: "XT.FunctorManager.functors",
  }),

  /** @private */
  cache: XT.Cache,

  /** @private */
  xtClass: "XT.FunctorManager",

});
