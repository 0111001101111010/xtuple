
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");
var HTTP    = require("http");

// load into module namespace
require("framework");

// load admin specifics
require("admin_router");

XT.AdminServer = XT.Server.extend({

  init: function() {

    //..................................................
    // fixed values for singelton instance of server

    var router = XT.AdminRouter, port = 19656, self = this,
      __server, name = "DEVELOPMENT INTERFACE SERVER ({0})".format(XT.VERSION);

    // set instance of the server on the router
    router.set("server", this);

    // set the properties on this server instance
    this.set("router", router);
    this.set("port", port);
    this.set("name", name);

    // try to start the server automatically
    try {
      (__server = HTTP.createServer(function(request, response) {
        self.get("router").handle(request, response);
      })).listen(port, "localhost", function() {
        XT.puts("Started server '{0}' listening on port {1}".format(name, port)); });

      // on success set instance of HTTP server
      this.set("__server", __server);
    } catch(e) { XT.throw(new XT.FATAL({ message: e })) }
  },

  // set the following features to null so they cannot be used
  start: null,
  pause: null,
  restart: null,

  xtClass: "XT.AdminServer",

});

process.on("OK_GO", function() {
  XT.AdminServer = XT.AdminServer.create();
});
