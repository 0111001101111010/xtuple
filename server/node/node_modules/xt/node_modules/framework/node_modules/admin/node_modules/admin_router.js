
// require some core modules
var UTIL    = require("util");
var PATH    = require("path");
var URL     = require("url");
var FS      = require("fs");
var HTTP    = require("http");
var MIME    = require("mime");

// load into module namespace
require("framework");

XT.AdminRouter = XT.Object.create({

  init: function() {

    this.on("requestReceivedLogIt", this.logRequest);

    // determine the correct path to the dev docs
    var dir = PATH.join(__dirname, "../www/dev/");

    this.set("www", dir);
  },

  handle: function(request, response) {

    var specialHandlers = this.get("specialHandlers");

    // collection some information
    var info = {};
    info.url = request.url;
    info.client = request.client.remoteAddress;
    info.method = request.method;
    info.contentType = MIME.lookup(info.url);
    // info.contentType = this.getContentType(info.url);
    info.response = response;
    info.request = request;

    var parts = info.url[ 0 ] == "/"
      ? info.url.substring(1).split("/")
      : info.url.split("/")
      ;

    info.file = parts[ parts.length-1 ];



    if(info.url == "/dev/ajax") {
      // XT.puts("RECEIVED AJAX REQUEST");
      var self = this;
      var ajaxPayload = "";
        this.once("readyToRespondToAjax", function(fromOther) {
          response.end(fromOther);
        });
      request.on("error", function() {
        response.end("ERROR");
      });
      request.on("data", function(chunk) {
        ajaxPayload += chunk;
      }).on("end", function() {
        var data = JSON.parse(ajaxPayload);
        var remotePayload = "";
        var req = HTTP.request({
          method: "POST",
          path: data.url,
          port: data.port,
          host: "localhost"
        }, function(localResp) {
          localResp.on("data", function(chunk) {
            remotePayload += chunk;
          }).on("end", function() {
            // XT.puts("HEARD BACK FROM INTERNAL CLIENT REQUEST");
            // XT.inspect(remotePayload);
            self.emit("readyToRespondToAjax", remotePayload);
          });
        });
        req.write(data.json);
        req.end();
      });
      return;
    }

    // if(false === info.contentType) {
    //   if(PATH.extname(info.url) == ".png") {
    //     info.contentType = "image/png";
    //   } else { info.contentType = "text/html"; }
    // }

    if(specialHandlers[ info.contentType ]) {
      XT.puts("DID HAVE SPECIAL HANDLER");
      this[ specialHandlers[ info.contentType ] ](info);
    } else {
      response.writeHead(200, { "Content-Type": info.contentType });
    }

    // notify
    this.emit("requestReceivedLogIt", info); 

    // chdir to developer root
    try {
      process.chdir(this.get("www"));
      FS.readFile(PATH.join(process.cwd(), info.url), function(err, data) {
        if(err) {
          response.writeHead(404);
          response.end("File Not Found");
        } else {
          if(info.sendAs) {
            XT.puts("SENDING AS {0}".format(info.sendAs));
            response.write(data, info.sendAs)
            response.end();
          } else { response.end(data); }
        }
      });
    } catch(e) { this.dumpBlind(response, UTIL.inspect(info) + "<br />" + e); }
  },

  logRequest: function(info) {
    XT.Tools.publishRequest(info, this);
    // var str = "Request Received:\n";
    // str += "URL: {0}\n".format(info.url);
    // str += "Client: {0}\n".format(info.client);
    // str += "Method: {0}\n".format(info.method);
    // str += "ContentType: {0}\n".format(info.contentType);
    // XT.puts(str);
  },

  validateRequest: function(request, response) { },

  dumpBlind: function(response, message) {
    response.setHeader("Content-Type", "text/html");
    response.write("<html><head><title>DUMPED BLINDLY</title></head><body>");
    response.write("<div><h2>ERROR</h2>{0}</div></body></html>".format(message));
    response.end();
  },

  getContentType: function(path) {
    var ext = PATH.extname(path);
    var types = this.get("contentTypes");
    // XT.puts(ext);
    // XT.inspect(types);
    if(types[ ext ]) {
      return types[ ext ];
    } else { return false; }
  },

  linkRelHandler: function(info) {
    var resp = info.response;
    str = "<{0}>;rel=stylesheet;type=text/css;media=all".format(
      info.url.substring(1));
    resp.setHeader("Link", str);
    // resp.setHeader("Connection", "Keep-Alive");
    resp.setHeader("Content-Type", "text/css");
    // resp.setHeader("Keep-Alive", "timeout=2, max=100");
  },

  imageHandler: function(info) {
    XT.puts("IN IMAGE HANDLER");
    var resp = info.response;
    // resp.setHeader("Content-Type", "image/png");
    // resp.setHeader("Transfer-Encoding", "chunked");
    // resp.setHeader("Content-Disposition", "attachement; filename={0}".format(info.file));
    info.sendAs = "binary";
  },

  specialHandlers: {
    "text/css": "linkRelHandler",
    "image/png": "imageHandler",
  },

  contentTypes: {
    ".css": "text/css",
    ".js": "text/javascript",
    ".html": "text/html",
    ".png": "image/png",
  },

  xtClass: "XT.AdminRouter", 

});
