DEV = {

  jsonIsValid: true,

  portIsValid: true,

  urlIsValid: true,

  jsonCheckbox: null,

  statusRecords: null,

  statusRoutes: null,

  statusBlock: null,

  elapsedTime: null,

  controlText: null,

  responseText: null,

  portText: null,

  urlText: null,

  send: null,

  baseUrl: "localhost",

};

function current() { return (new Date).getTime(); }

function evalCanSendStatus() {
  var valid = true;
  if(!DEV.jsonIsValid) valid = false;
  if(!DEV.urlIsValid) valid = false;
  if(!DEV.portIsValid) valid = false;
  if(valid) {
    $(DEV.send).trigger("enableSend");
  } else {
    $(DEV.send).trigger("disableSend");
  }
}

function evalJSON() {
  try {
    var json = JSON.parse($(DEV.controlText).val());
    DEV.jsonIsValid = true;
    $(DEV).trigger("validatedField", DEV.controlText);
  } catch(e) {
    DEV.jsonIsValid = false;
    if($(DEV.controlText).val() === "") {
      $(DEV).trigger("validatedField", DEV.controlText);
      return;
    }
    $(DEV).trigger("invalidatedField", DEV.controlText);
  }
}

function evalPort() {
  var port = $(DEV.portText).val();
  if(port === "" || port.match(/^\d+$/)) {
    if(port === "") { 
      DEV.portIsValid = false;
      $(DEV).trigger("validatedField", DEV.portText);
      return;
    }
    DEV.portIsValid = true;
    $(DEV).trigger("validatedField", DEV.portText);
  } else {
    DEV.portIsValid = false;
    $(DEV).trigger("invalidatedField", DEV.portText);
  }
}

function evalUrl() {
  var url = $(DEV.urlText).val();
  if(url === "" || url.match(/^\/?(([a-zA-Z0-9]+(([._]|\/)[a-zA-Z0-9])?\/?)+)?$/)) {
    if(url === "") { 
      DEV.urlIsValid = false;
      $(DEV).trigger("validatedField", DEV.urlText);
      return;
    }
    DEV.urlIsValid = true;
    $(DEV).trigger("validatedField", DEV.urlText);
  } else { 
    DEV.urlIsValid = false;
    $(DEV).trigger("invalidatedField", DEV.urlText);
  }
}

function validify(e, objRef) {
  $(objRef).removeClass("invalid");
  evalCanSendStatus();
}

function invalidify(e, objRef) {
  $(objRef).addClass("invalid");
  evalCanSendStatus();
}

function parseResult(json) {

  console.log(json);

  // data returned is a parsed json object
  // so we have top level keys with their subsequent columns...
  var html = [];

  var keys = [];
  for(var key in json)
    if(json.hasOwnProperty(key))
      keys.push(key);

  html = [];

  // push the outer container object
  html.push("<div id='response-block-content'>");

  // iterate over content for each key
  for(var i=0, ilen=keys.length; i<ilen; ++i) {

    // name of the object
    var key = keys[ i ];

    // collection of objects as rows in an array
    var content = json[ key ];

    // add object wrapper
    html.push("<div class='response-object-wrapper' id='for-" + key + "'>");

    // add pre and code wrapper for content
    html.push("<pre><code>");

    // add label at the top
    html.push("<div class='top-level-key'>" + key + "</div>");

    // iterate over content
    for(var j=0, jlen=content.length; j<jlen; ++j) {

      // push a container for each individual object
      html.push("<div class='object-level-wrapper'>");

      // push left bracket
      html.push("<div class='special-left'>&#123</div>");

      // push right bracket
      html.push("<div class='special-right'>&#125</div>");

      // grab the keys for the object
      var _keys = [];
      for(var _key in content[ j ])
        _keys.push(_key);

      // iterate over keys to append to html content
      for(var k=0, klen=_keys.length; k<klen; ++k) {

        // key for the column
        var _key = _keys[ k ];
         
        // value for the column
        var _val = content[ j ][ _key ];

        // push the column container
        html.push("<p class='column-in-row'>");

        // push the column
        html.push("<span class='column-name'>" + _key + "</span>")
        
        // push the separator
        html.push("&nbsp;&raquo;&nbsp;");

        // push the value
        html.push("<span class='value'>");

        // if the value is an array...
        if(_val instanceof Array)
          _val = _val.length > 0
            ? " [ " + _val.join(", ") + " ] "
            : " [] "
            ;

        // push the value
        html.push(_val);
        
        // push the end of the value span
        html.push("</span>");

        // end the column
        html.push("</p>");

      }


      // end the object level wrapper
      html.push("</div>");

    }

    // end the pre and code blocks for the first object class
    html.push("</code></pre>");

    // end the object class container
    html.push("</div>");

  }

  // end the outer container object
  html.push("</div>");
    
  html = html.join("");

  $(DEV.responseText).html(html);


}

function submitPayload() {

  var payloadText = $(DEV.controlText).val();
  var port = $(DEV.portText).val();
  var url = $(DEV.urlText).val();
  var base = DEV.baseUrl;
  var realUrl = "/dev/ajax";
  var SENDING = "";

  var payloadObj = { "port":port, "url":url, "json":payloadText }; 
  var payload = JSON.stringify(payloadObj);
  
  SENDING += "URL: " + url + "\n";
  SENDING += "PAYLOAD: " + payloadText + "\n";
  SENDING += "PORT: " + port + "\n";
  
  $(DEV.responseText).html(SENDING);
  console.log(SENDING);

  var before;
  var expectedType = $(DEV.jsonCheckbox).is(":checked")
    ? "json"
    : "html"
    ;

  $.ajax({
    url: realUrl,
    cache: false,
    complete: function(xhr, stat) {
      console.log("RESPONSE STATUS: " + stat);
    },
    type: "POST",
    async: false,
    data: payload,
    dataType: expectedType,
    contentType: "application/json",
    success: function(data, stat, xhr) {
      var elapsed = current() - before;
      $(DEV.elapsedTime).html("<span class='elapsed-time'>elapsed time: " + elapsed + " ms</span>");
      if(expectedType == "json") {
        parseResult(data);
      } else { $(DEV.responseText).html(data); }
    },
    beforeSend: function() { before = current(); },
    error: function(xhr, stat, err) {
      $(DEV.responseText).val("ERROR: " + stat);
    },
  });

  payloadObj.url = "/retrieve/status/records";
  payload = JSON.stringify(payloadObj);

  $.ajax({
    url: realUrl,
    async: false,
    cache: false,
    type: "POST",
    data: payload,
    dataType: "html",
    contentType: "application/json",
    success: function(data, stat, xhr) {
      console.log("RECORDS BACK: " + data);
      $(DEV.statusRecords).html(data);
    },
    beforeSend: function() { console.log("RECORDS BEFORE"); },
    error: function(xhr, stat, err) {
      console.log("RECORDS ERROR: " + err);
      $(DEV.statusRecords).html("ERROR: " + err);
    },
  });

  payloadObj.url = "/retrieve/status/routes";
  payload = JSON.stringify(payloadObj);

  $.ajax({
    url: realUrl,
    cache: false,
    async: false,
    type: "POST",
    data: payload,
    dataType: "html",
    contentType: "application/json",
    success: function(data, stat, xhr) {
      // console.log("ROUTES BACK: " + data);
      $(DEV.statusRoutes).html(data);
    },
    beforeSend: function() { console.log("ROUTES BEFORE"); },
    error: function(xhr, stat, err) {
      console.log("ROUTES ERROR: " + err);
      $(DEV.statusRoutes).html("ERROR: " + err);
    },
  });
}

$(document).ready(function() {

  console.log("INITIALIZING");

  //.......................................
  // determine and store references

  DEV.controlText = $("textarea#controlTextArea")[ 0 ];
  DEV.responseText = $("div#responseBlock")[ 0 ];
  DEV.portText = $("input#urlPort")[ 0 ];
  DEV.urlText = $("input#urlText")[ 0 ];
  DEV.send = $("input#submitButton")[ 0 ];
  DEV.elapsedTime = $("div#elapsedTime")[ 0 ];
  DEV.jsonCheckbox = $("input#jsonCheckbox")[ 0 ];
  DEV.statusBlock = $("div#serverStatus")[ 0 ];
  DEV.statusRecords = $("div#serverRecords")[ 0 ];
  DEV.statusRoutes = $("div#serverRoutes")[ 0 ];

  // console.log(DEV.controlText);
  // console.log(DEV.responseText);
  // console.log(DEV.portText);
  // console.log(DEV.urlText);
  // console.log(DEV.send);

  //.......................................
  // try and get the response block div to be the
  // same computed size as the textarea

  //.......................................
  // built-ins event handling

  $(DEV.controlText).bind("keyup", evalJSON);
  $(DEV.portText).bind("keyup", evalPort);
  $(DEV.urlText).bind("keyup", evalUrl);

  //.......................................
  // custom event handling

  $(DEV.send).bind({
    "enableSend": function() { $(DEV.send).removeAttr("disabled"); },
    "disableSend": function() { $(DEV.send).attr("disabled", "disabled"); },
    "click": submitPayload,
  });

  $(DEV).bind({
    "validatedField": validify,
    "invalidatedField": invalidify
  });

  evalCanSendStatus();

  var shiftDown = false;
  $(window).keydown(function(e) {
    if(e.keyCode == 13) {
      if(shiftDown) {
        if($(DEV.send).attr("disabled")) {
          return;
        } else { e.preventDefault(); $(DEV.send).trigger("click"); }
      } else { return; }
    } else if(e.keyCode == 16) {
      shiftDown = true;
    } else { return; }
  }).keyup(function(e) {
    if(e.keyCode == 16)
      shiftDown = false;
  });

  submitPayload();

});
