
// require third party tools
var NOM     = require("nomnom");
var PSQL    = require("psql");


// synchronize startup routines...
// @todo Finish this...

// load into module namespace
require("framework");

XT.puts("\nXTUPLE NODE.JS SERVER FRAMEWORK ({0}) STARTING INITIALIZATION\n".format(XT.VERSION));

// parse command line arguments
XT.CLI      = NOM.opts(XT.opts).parseArgs();

//..................................................
// FOR DEVELOPMENT ONLY

// create a developer database connection string
XT.DEVS     = XT.Tools.createPsqlString(XT.CLI);

//..................................................
// HACK DUE TO HURRICANE ALLOW OVERRIDE OF LOCATION
// FOR METASQL PROXY SERVER

var DNS     = require("dns");
var NET     = require("net");
var URL     = require("url");

XT.METASQL_SOURCE_URL   = XT.CLI[ "metasql-server" ];
XT.METASQL_SOURCE_PORT  = XT.CLI[ "metasql-server-port" ];

// make sure we know the format of this address/url
var parts = URL.parse(XT.METASQL_SOURCE_URL);

// if the parsed `host` doesn't match the whole URL we need to make sure to
// only test the `host` component
var testHost;

if(parts.hostname) {
  testHost = parts.hostname;
} else {

  // need to manually parse it
  parts = XT.METASQL_SOURCE_URL[ 0 ] == "/"
    ? XT.METASQL_SOURCE_URL.slice(1).split("/")
    : XT.METASQL_SOURCE_URL.split("/")
    ;

  // shift the first element off the array as the `host`
  testHost = parts.shift();
  
  if(parts.length > 0) {

    // this means there were additional parts to the path
    // so put them back together and add them as the portion of
    // the path to be prepended to the proxy url
    parts = parts.join("/").prepend("/");

    // set it for later use
    XT.METASQL_SOURCE_PATH = parts;
  } else { XT.METASQL_SOURCE_PATH = ""; }
}

// STILL PART OF THE HACK
// need to determine if the domain specified can be resolved, seems
// to be a problem later on if the domain is localhost so figure it out
// now rather than later during each subsequent call
XT.puts("Attempting to resolve MetaSQL proxy URL: {0}".format(testHost));

// first determine if it is a URL or IP
if(NET.isIPv4(testHost)) {

  // it is an IP address so we will ASSUME we can use it
} else {
  
  // must be a URL so see if we can resolve the IP address of it
  DNS.resolve4(testHost, function(err, addresses) {
    if(err) {
      var msg = "Could not resolve the requested domain name: {0}".format(testHost);
      msg = "{0}\n{1}".format(msg, err);
      XT.throw(new XT.FATAL({ message: msg, stack: err.stack }));
    } else {
      if(addresses.length > 0) {

        // we only want to use 1 of any addresses found so...take the first
        // and hope it works (this is OK for this particular non-permanent hack)
        XT.METASQL_SOURCE_URL = addresses[ 0 ];

        setTimeout(function() {
          XT.puts("\n(NOTE: Found and using IP {0} for the MetaSQL proxy server)\n".format(
            XT.METASQL_SOURCE_URL)); }, 300);
      }
    }
  }); 
}

// END HURRICANE METASQL PROXY HACK
//.................................................

// create a developer connection for interim testing
XT.DEVC     = new PSQL.connect(XT.DEVS);

process.on("exit", function() {
  XT.DEVC.close();
});

//..................................................
// (STILL FOR DEV) setup a normal http server

// @todo Temporary hack...
process.on("OK_GO", function() {
  XT.devServer = XT.Server.create({
    name: "DEVELOPMENT HTTP SERVER ({0})".format(XT.VERSION),
    router: XT.Router.create(),
    port: XT.CLI.port,
  }).start();
});

// @todo Temporary hack...
process.emit("CONNECTION_AVAILABLE");
