/*globals XT process global */

global.YES = true;
global.NO = false;

/** @namespace
  
  @extends SC.Object
*/
XT = global.XT = SC.Object.create(
  /** @scope XT.prototype */ {

  NAMESPACE: "XT",
  VERSION: "4.0.0ALPHA",
  
  /**
    Numbers are manually generated.
  */
  MANUAL_NUMBER: 'M',

  /** 
    Numbers are automatically generated by the server.
  */
  AUTO_NUMBER: 'A',

  /**
    Numbers are automatically generated, but can be over-ridden by the user.
  */
  AUTO_OVERRIDE_NUMBER: 'O',
  
  MONEY_SCALE: 2,
  QTY_SCALE: 6,
  QTY_PER_SCALE: 7,
  COST_SCALE: 6,
  SALES_PRICE_SCALE: 4,
  PURCH_PRICE_SCALE: 6,
  EXT_PRICE_SCALE:4,
  UOM_RATIO_SCALE: 7,
  PERCENT_SCALE: 4

});

SC.mixin(XT, 
  /** @scope XT */ {

  //...................................................
  //
  // THE FOLLOWING IS A WORKAROUND TO ALLOW CERTAIN FILES
  // TO LOAD OUT OF ORDER BUT THIS SHOULD NOT BE AN EXCUSE
  // TO NOT CORRECT THE LOAD-ORDER ISSUE -- IT ONLY EXISTS
  // AS THE XBO SYSTEM IS BEING REMOVED TO ALLOW THIS TO
  // CONTINUE TO LIMP ALONG
  // THE CODE IS MERELY COPIED FROM THE SC RUNLOOP STUFF

  _xt_readyQueue: [],

  isReady: false,

  ready: function(target, method) {
    var queue = this._xt_readyQueue;
    
    // normalize
    if (method === undefined) {
      method = target; target = null ;
    } else if (SC.typeOf(method) === SC.T_STRING) {
      method = target[method] ;
    }
    
    if (!method) return this; // nothing to do.
    
    // if isReady, execute now.
    if (this.isReady) return method.call(target || document) ;
    
    // otherwise, add to queue.
    queue.push([target, method]) ;
    return this ; 
  },

  run: function() {
    if(this.isReady) return;
    this.isReady = true;
    var handler, ary, idx, len ;
    do {
      ary = XT._xt_readyQueue ;
      XT._xt_readyQueue = [] ; // reset
      for (idx=0, len=ary.length; idx<len; idx++) {
        handler = ary[idx] ;
        var target = handler[0] || document ;
        var method = handler[1] ;
        if (method) method.call(target) ;
      }
    } while (XT._xt_readyQueue.length > 0) ;
  },

  //
  // END HACKY STUFF
  //...................................................




  //...................................................
  // LOGGING
  //

  /**
    @note Placeholder for real logging mechanism
  */
  logLevels: SC.Object.create(
    /** @scope XT.logLevels */ {
    warn: YES,
    error: YES,
    info: YES 
  }),

});
